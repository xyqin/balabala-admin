package com.newhead.${vo.key}.modules.${vo.smoduleName}.base;

import com.google.common.collect.Maps;
import com.newhead.rudderframework.core.web.api.ApiEntity;
import com.newhead.rudderframework.core.web.api.ApiStatus;
import com.newhead.rudderframework.core.web.api.ApiValidateException;
import com.newhead.rudderframework.core.web.component.pagination.Page;
import com.newhead.rudderframework.core.web.component.tree.Tree;
import com.newhead.rudderframework.modules.LabelValueItem;


import com.newhead.rudderframework.core.web.controller.WebController;
import com.newhead.${vo.key}.modules.${vo.smoduleName}.base.repository.entity.${vo.bmoduleName};
import com.newhead.${vo.key}.modules.${vo.smoduleName}.ext.Simple${vo.bmoduleName}Service;
import com.newhead.${vo.key}.modules.${vo.smoduleName}.ext.protocol.*;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;

import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * RudderFramework 自动生成
 * ${vo.moduleTitle}控制器
 * ${vo.date}
 */
@Api(tags = "${vo.moduleTitle}", description = "相关的API")
public abstract class Abstract${vo.bmoduleName}Controller extends WebController  {

    protected abstract Simple${vo.bmoduleName}Service getService();
    protected ApiEntity fillCreateRequest(Simple${vo.bmoduleName}CreateRequest request) {
        return null;
    }

    protected ApiEntity fillUpdateRequest(Simple${vo.bmoduleName}UpdateRequest request) {
        return null;
    }
    /**
     * 创建${vo.moduleTitle}
     *
     * @param request
     * @return
     */
    @ApiOperation(value = "创建", httpMethod = "POST", response = String.class)
    @RequestMapping(value = "create", method = RequestMethod.POST)
    public ApiEntity<Map> create(@RequestBody Simple${vo.bmoduleName}CreateRequest request) {
    <% for(field in vo.fields ){%>
        <% if(field.fieldType!='Id') {%>
            <% if(field.valid) {%>
        if (StringUtils.isEmpty(request.get${field.bname}())) {
            throw new ApiValidateException(ApiStatus.STATUS_400.getCode(),"${field.desc}不能为空！");
        }

            <% } %>
       <% } %>
    <% } %>
    <% for(field in vo.fields ){%>
        <% if(field.checkName) {%>
        if(request.get${field.bname}()!=null) {
            ${vo.bmoduleName} ${field.name} = getService().existBy${field.bname}(request.get${field.bname}());
            if (${field.name} != null) {
                throw new ApiValidateException(ApiStatus.STATUS_400.getCode(),"${field.desc}'"+request.get${field.bname}()+"'已经存在！");
            }
        }
        <% } %>

    <% } %>

        ApiEntity entity = fillCreateRequest(request);
        if (entity!=null) {
            return entity;
        }

        ${vo.bmoduleName} ${vo.smoduleName} = getService().create(request);
        //默认创建成功返回ID
        Map<String, Long> result = Maps.newHashMap();
        result.put("id", ${vo.smoduleName}.getId());
        return new ApiEntity<>(result);
    }

    /**
     * 更新${vo.moduleTitle}
     *
     * @param request
     * @return
     */
    @ApiOperation(value = "更新", httpMethod = "POST", response = String.class)
    @RequestMapping(value = "update", method = RequestMethod.POST)
    public ApiEntity update(@RequestBody Simple${vo.bmoduleName}UpdateRequest request) {

        <% for(field in vo.fields ){%>
            <% if(field.fieldType!='Id') {%>
                <% if(field.valid) {%>
                if (StringUtils.isEmpty(request.get${field.bname}())) {
                    throw new ApiValidateException(ApiStatus.STATUS_400.getCode(),"${field.desc}不能为空！");
                }

                <% } %>
           <% } %>
        <% } %>

<% for(field in vo.fields ){%>
    <% if(field.checkName) {%>
    if(request.get${field.bname}()!=null) {

        ${vo.bmoduleName} ${field.bname} = getService().existBy${field.bname}(request.get${field.bname}());
        if (${field.bname} != null && ${field.bname}.getId()!=request.getId()) {
            throw new ApiValidateException(ApiStatus.STATUS_400.getCode(),"${field.desc}"+request.get${field.bname}()+"'已经存在！");
        }
    }

    <% } %>
<% } %>

       ApiEntity entity = fillUpdateRequest(request);
        if (entity!=null) {
            return entity;
        }
        getService().update(request);
        return new ApiEntity<>();
    }

    /**
     * 得到${vo.moduleTitle}对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "获取详情", httpMethod = "GET", response = String.class)
    @RequestMapping(value = "getdetail/{id}", method = RequestMethod.GET)
    public ApiEntity getDetail(@ApiParam(required = true, name = "id", value = "菜单ID") @PathVariable("id") Long id) {
        Simple${vo.bmoduleName}GetDetailResponse response =  getService().getDetail(id);
        <% for(ref in vo.refs ){%>
            <% if(ref.displayType=='ListSelect') { %>
        List<LabelValueItem> items = getService().get${ref.brnref}s(id);
        response.set${ref.brnref}Items(items);
        	<% } else if(ref.displayType=='TreeSelect') { %>
        Tree items = getService().get${ref.brnref}s(id);
        response.set${ref.brnref}Items(items);
        	<% } %>
        <% } %>
        return new ApiEntity<Simple${vo.bmoduleName}GetDetailResponse>(response);
    }

    /**
     * 删除${vo.moduleTitle}ID
     *
     * @param id
     */
    @ApiOperation(value = "删除", httpMethod = "POST", response = String.class)
    @RequestMapping(value = "delete/{id}", method = RequestMethod.POST)
    public ApiEntity delete(@ApiParam(required = true, name = "id", value = "${vo.moduleTitle}ID") @PathVariable("id") Long id) {
        getService().delete(id);
        return new ApiEntity<>();
    }

    /**
     * 得到${vo.moduleTitle}列表
     *
     * @return
     */
    @ApiOperation(value = "获取", response = ApiEntity.class, notes = "${vo.moduleTitle}ID")
    @RequestMapping(value = "getlist", method = RequestMethod.GET)
    public ApiEntity<List<Simple${vo.bmoduleName}QueryResponse>> getList(<% for(field in vo.queryfields){%><% if(field.queryType>0){%><%if (field.fieldType=='Date') {%>@RequestParam(required = false) ${field.javaType} startDate${field.bname},@RequestParam(required = false) ${field.javaType} endDate${field.bname} <%} else {%>@RequestParam(required = false) ${field.javaType} ${field.name}<%}%><% if (!fieldLP.last) {%>,<%}%><%}%><%}%>) {
        Simple${vo.bmoduleName}QueryListRequest request = new Simple${vo.bmoduleName}QueryListRequest();
   <% for(field in vo.queryfields ){%>
        <%if (field.fieldType=='Date') {%>
        request.setStartDate${field.bname}(startDate${field.bname});
        request.setEndDate${field.bname}(endDate${field.bname});
        <%} else {%>
        if (!StringUtils.isEmpty(${field.name})) {
            request.set${field.bname}(${field.name});
        }
        <%}%>
   <%}%>
        List<Simple${vo.bmoduleName}QueryResponse> sources = getService().queryList(request);
        return new ApiEntity<List<Simple${vo.bmoduleName}QueryResponse>>(sources);
    }


    /**
     * 得到翻页数据
     *
     * @return
     */
    @ApiOperation(value = "获取", response = ApiEntity.class, notes = "")
    @RequestMapping(value = "getpage", method = RequestMethod.GET)
    public ApiEntity getPage(
    <% for(field in vo.queryfields){%>
        <% if(field.queryType>0){%>
            <%if (field.fieldType=='Date') {%>
        @RequestParam(required = false) ${field.javaType} startDate${field.bname},
        @RequestParam(required = false) ${field.javaType} endDate${field.bname},
            <%} else {%>
        @RequestParam(required = false) ${field.javaType} ${field.name},
            <%}%>
        <%}%>
    <%}%>
        @RequestParam(required = false) Integer page,
        @RequestParam(required = false) Integer size) {
        Simple${vo.bmoduleName}QueryPageRequest request = new Simple${vo.bmoduleName}QueryPageRequest();
   <% for(field in vo.queryfields ){%>
        <%if (field.fieldType=='Date') {%>
        request.setStartDate${field.bname}(startDate${field.bname});
        request.setEndDate${field.bname}(endDate${field.bname});
        <%} else {%>
        if (!StringUtils.isEmpty(${field.name})) {
            request.set${field.bname}(${field.name});
        }
        <%}%>
   <%}%>
        if (page==null) {
            request.setPage(1);
        } else {
            request.setPage(page);
        }
        if (size==null) {
            request.setPage(10);
        } else  {
            request.setSize(size);
        }
        Page<Simple${vo.bmoduleName}QueryResponse> sources = getService().queryPage(request);
        return new ApiEntity<>(sources);
    }

     <% if(vo.dataType=='Tree') {%>
        /**
         * 返回树结构对象
         *
         * @return
         */
    @ApiOperation(value = "获取", response = ApiEntity.class, notes = "")
    @RequestMapping(value = "gettree", method = RequestMethod.GET)
    public ApiEntity getTree() {
        Tree tree = getService().getTree();
        return new ApiEntity<>(tree);
    }
     <% } %>
}